syntax = "proto3";

package dwjk.dtp;

import "dtp.type.proto";


//*********************************************
// 请求响应标识
//*********************************************

message RequestHeader                               /* API Request Header */
{
    uint32 api_id = 1;                              // API编号
    string request_id = 2;                          // 请求唯一标识UUID
    string token = 3;                               // 所有接口请求都需带上该标识,除了LoginRequest.
}

message ResponseHeader                              /* API Response Header */
{
    uint32 api_id = 1;
    string request_id = 2;                          // 带回相应Request的request_id
    ResponseStatusCode code = 3;                    // (TBD)Response的各种非法响应在实际调用中是否存在？
    string message = 4;
}

message ReportHeader                                /* API Report Header */
{
    uint32 api_id = 1;
    ResponseStatusCode code = 2;                    // (TBD)细化约定
    string message = 3;
                                                    // 例: 违规
                                                    // ResponseHeader.ResponseStatusCode = RESPONSE_CODE_FORBIDDEN
                                                    // ResponseHeader.message = 违规信息
                                                    // 例: 柜台拒绝
                                                    // ResponseHeader.ResponseStatusCode = RESPONSE_CODE_FORBIDDEN
                                                    // ResponseHeader.message = 无法连接柜台/碎股/验资验券?
}



//*********************************************
// 账户相关API
//*********************************************

message LoginAccountRequest                         /* 登录: 获取token */
{                                                   // MUST: RequestHeader.api_id = 10001001，token不用填
    string account_no = 1;                          // 资金账号
    string password = 2;
}                                                   // 调用时payload = RequestHeader + LoginAccountRequest

message LoginAccountResponse
{                                                   // MUST: ResponseHeader.api_id = 11001001
    string token = 1;
}                                                   // 调用时 payload = ResponseHeader + LoginAccountResponse

message LogoutAccountRequest                        /* 退出: token失效 */
{                                                   // MUST: RequestHeader.api_id = 10001002
    string account_no = 1;                          // 资金账号
}                                                   // 调用时 payload = RequestHeader + LogoutAccountRequest

message LogoutAccountResponse
{                                                   // MUST: ResponseHeader.api_id = 11001002
}                                                   // 调用时 payload = ResponseHeader + LogoutAccountResponse(可以省略)

//*********************************************
// 批量操作API
//*********************************************
message PlaceBatchOrder                                  /* 提交批量委托 */
{                                                        // MUST: RequestHeader.api_id = 10002001
    string account_no = 1;                               // 资金账号
    uint32 order_counte = 2;			         // 委托笔数
    repeated BatchOrderItem order_list = 3;

    message BatchOrderItem
    {
        Exchange exchange = 1;                          // 交易所
	string code = 2;                                // 证券代码
        OrderSide order_side = 3;                       // 委托方向，只支持买卖
	string price = 4;                               // 价格留3位小数
        uint32 quantity = 5;                            // 委托数量
	OrderType order_type = 6;                       // 委托竞价类型
	string order_original_id = 7;                   // 客户委托号
    }
}                 

//*********************************************
// 委托相关API
//*********************************************

message PlaceOrder                                  /* 提交单笔委托 */
{                                                   // MUST: RequestHeader.api_id = 10002001
    string account_no = 1;                          // 资金账号
    string order_original_id = 2;                   // 客户委托号
    Exchange exchange = 3;                          // 交易所
    string code = 4;                                // 证券代码
    string price = 5;                               // 价格留3位小数
    uint32 quantity = 6;                            // 委托数量
    OrderSide order_side = 7;                       // 委托方向
    OrderType order_type = 8;                       // 委托竞价类型
}                                                   // 调用时 payload = RequestHeader + PlaceOrder
                                                    // PlaceOrder的响应使用PlacedReport

message CancelOrder                                 /* 提交单笔撤单委托 */
{                                                   // MUST: RequestHeader.api_id = 10002002
    string account_no = 1;
    Exchange exchange = 2;
    string order_exchange_id = 3;                   // 要撤的委托：交易所委托号
}                                                   // 调用时 payload = RequestHeader + CancelOrder
                                                    // CancelOrder的响应使用CancellationReport


//*********************************************
// 回报相关API
//*********************************************

message PlacedReport                                /* 消息: 委托确认回报 */
{                                                   // MUST: ReportHeader.api_id = 20001001
    string order_exchange_id = 1;                   // 交易所委托号
    string placed_time = 2;                         // 交易所委托确认时间,单位毫秒,不存日期 ;顶点柜台返回的是 HH:MM:SS 格式，推断交易所返回的也是这个格式，所以改成字符串格式 yinwb
    string freeze_amount = 3;                       // 冻结金额(负数表示解冻)
    OrderStatus status = 4;                         // 委托状态: 申报结果

    string order_original_id = 5;                   // 客户委托号

    string account_no = 6;                          // 资金账号
    Exchange exchange = 7;                          // 交易所
    string code = 8;                                // 证券代码
    uint32 quantity = 9;                            // 委托数量
    OrderSide order_side = 10;                      // 委托竞价方向
    string price = 11;                              // 价格留3位小数
}                                                   // 调用时payload = ReportHeader + PlacedReport

message FillReport                                  /* 消息: 委托成交回报 */
{                                                   // MUST: ReportHeader.api_id = 20001002
    string fill_exchange_id = 1;                    // 交易所成交编号
    string fill_time = 2;                           // 成交的时间,单位毫秒,不存日期;顶点柜台返回的是 HH:MM:SS 格式，推断交易所返回的也是这个格式，所以改成字符串格式 yinwb
    FillStatus fill_status = 3;                     // 成交状态 0:未知 1:成交 2:撤单 3: 废单 4:确认 (TBD: 可能来自'撤销标志')
                                                    // TBD: 成交状态中指的是什么，其中是否有撤单? 或者撤单成功会使用该回报?
						    // *** 成交回报的状态只会有成交，所以这个状态可以删除
    string fill_price = 4;                          // 本次成交价格
    uint32 fill_quantity = 5;                       // 本次成交数量; fill_status为撤单时，此数值为撤单数量(TBD)
    string fill_amount = 6;                         // 本次成交金额
    string clear_amount = 7;                        // (TBD)本次清算资金(委托为卖出方向时表示本次成交新增的可用资金)
    uint32 total_fill_quantity = 8;                 // 该委托总成交数量(本笔成交处理后)
    string total_fill_amount = 9;                   // 该委托总成交金额(本笔成交处理后)
    uint32 total_cancelled_quantity = 10;           // (TBD)该委托已撤单数量? 怀疑撤单成功会有该回报? ***撤单成功走撤单回报

    string order_exchange_id = 11;                  // 交易所委托号
    string order_original_id = 12;                  // 客户委托号
    string account_no = 13;                         // 资金账号
    Exchange exchange = 14;
    string code = 15;
    string price = 16;                              // 价格留3位小数
    uint32 quantity = 17;                           // 委托数量
    OrderSide order_side = 18;                      // 委托竞价方向
}                                                   // 调用时payload = ReportHeader + FillReport

message CancellationReport                          /* 消息: 委托撤单确认回报 */
{                                                   // MUST: ReportHeader.api_id = 20001003
    string order_exchange_id = 1;                   // 要撤的委托：交易所委托号
    string order_original_id = 2;                   // 要撤的委托：客户委托号
    string account_no = 3;                          // 资金账号
    Exchange exchange = 4;
    string code = 5;
    uint32 quantity = 6;                            // 委托数量
    OrderSide order_side = 7;                       // 委托竞价方向
    OrderStatus status = 8;                         // 委托状态 (TBD: 可能来自'撤销标志') ***撤单回报只会有已撤状态

    uint32 total_fill_quantity = 9;                 // 该委托已成交数量
    uint32 cancelled_quantity = 10;                 // 撤单数量(实际撤单数量)
    string freeze_amount = 11;                      // (TBD)冻结金额(负数表示解冻) ***买入撤单时会有释放的冻结金额，卖出撤单时为0
}                                                   // 调用时payload = ReportHeader + CancellationReport


//*********************************************
// 业务查询相关API
//*********************************************

message QueryOrdersRequest                          /* 查询委托详情 */
{                                                   // MUST: RequestHeader.api_id = 10003001
    string account_no = 1;
    string order_exchange_id = 2;                   // 空则查询全部

    QueryOrderCriteria  query_criteria = 3;         // 查询全部委托或只查可撤单委托
    QueryPagination pagination = 4;                 // 查询结果分页标识

    Exchange exchange = 5;
    string code = 6;
    string order_original_id = 7;                   // 空则查询全部
    OrderSide order_side = 8;

}                                                   // 调用时payload = RequestHeader + QueryOrdersRequest

message QueryOrdersResponse
{                                                   // MUST: ResponseHeader.api_id = 11003001
    repeated Order order_list = 1;

    message Order                                   // 委托明细
    {
        string order_exchange_id = 1;               // 交易所委托号
        string order_original_id = 2;               // 客户委托号
        Exchange exchange = 3;
        string code = 4;
        string name = 5;
        string price = 6;                           // 价格留3位小数
        uint32 quantity = 7;                        // 委托数量
        OrderSide order_side = 8;                   // 委托竞价方向
        OrderType order_type = 9;                   // 委托竞价类型
        OrderStatus status = 10;
        string order_time = 11;                     // 交易所委托时间,单位毫秒,不存日期 ;顶点柜台返回的是 HH:MM:SS 格式，推断交易所返回的也是这个格式，所以改成字符串格式 yinwb

        string account_no = 12;
        string average_fill_price = 13;             // 成交均价
        uint32 total_fill_quantity = 14;            // 该委托总成交数量
        string total_fill_amount = 15;              // 该委托总成交金额
        string freeze_amount = 16;                  // 冻结金额(负数表示解冻)
        string clear_amount = 17;                   // (TBD)清算资金 ***买入为负，卖出为正
        uint32 total_cancelled_quantity = 18;       // 该委托已撤单数量
        string status_message = 19;                 // 委托状态的文字说明，包括废单原因
    }
}                                                   // 调用时payload = ResponseHeader + QueryOrdersResponse

message QueryFillsRequest                           /* 查询成交详情 */  // (TBD)顶点有两个接口: 查询客户分笔成交630006,查询客户实时成交630007 ***目前使用分笔成交
{                                                   // MUST: RequestHeader.api_id = 10003002
    string account_no = 1;
    string order_exchange_id = 2;                   // 空则查询全部

    QueryPagination pagination = 3;                 // 查询结果分页标识

    Exchange exchange = 4;
    string code = 5;
    string order_original_id = 6;                   // 空则查询全部
    OrderSide order_side = 7;
    bool include_cancel_fill = 8;                   // fasle 不包括撤单成交
}                                                   // 调用时payload = RequestHeader + QueryFillsRequest

message QueryFillsResponse
{                                                   // MUST: ResponseHeader.api_id = 11003002
    repeated Fill fill_list = 1;

    message Fill                                    // 分笔成交明细
    {
        string fill_exchange_id = 1;                // 交易所成交编号
        string fill_time = 2;                       // 成交的时间,单位毫秒,不存日期 ;顶点柜台返回的是 HH:MM:SS 格式，推断交易所返回的也是这个格式，所以改成字符串格式 yinwb
        FillStatus fill_status = 3;                 // (TBD: 同上FillReport)成交状态 0:未知 1:成交 2:撤单 3: 废单 4:确认 (TBD: 可能来自'撤销标志') *** 只有撤单和成交两个状态

        string fill_price = 4;                      // 本次成交价格
        uint32 fill_quantity = 5;                   // 本次成交数量; fill_status为撤单时，此数值为撤单数量
        string fill_amount = 6;                     // 本次成交金额
        string clear_amount = 7;                    // 本次清算资金(委托为卖出方向时表示本次成交新增的可用资金)

        string order_exchange_id = 8;               // 交易所委托号
        string order_original_id = 9;               // 客户委托号
        Exchange exchange = 10;
        string code = 11;
        string name = 12;
        OrderSide order_side = 13;                  // 委托竞价方向
    }
}                                                   // 调用时payload = ResponseHeader + QueryFillsResponse

message QueryCapitalRequest                         /* 查询资产 */
{                                                   // MUST: RequestHeader.api_id = 10003003
    string account_no = 1;
}                                                   // 调用时payload = RequestHeader + QueryCapitalRequest

message QueryCapitalResponse
{                                                   // MUST: ResponseHeader.api_id = 11003003
    string account_no = 1;
    string balance = 2;                             // 账户余额
    string available = 3;                           // 可用资金
    string freeze = 4;                              // 冻结金额
    string securities = 5;                          // 证券市值
    string total = 6;                               // 总资产
}                                                   // 调用时payload = ResponseHeader + QueryCapitalResponse

message QueryPositionRequest                        /* 查询持仓 */
{                                                   // MUST: RequestHeader.api_id = 10003004
    string account_no = 1;
    Exchange exchange = 2;
    string code = 3;                                // 为空时查询全部

    QueryPagination pagination = 4;                 // 查询结果分页标识
}                                                   // 调用时payload = RequestHeader + QueryPositionRequest

message QueryPositionResponse
{                                                   // MUST: ResponseHeader.api_id = 11003004
    repeated PositionDetail position_list = 1;
    QueryPagination pagination = 2;

    message PositionDetail
    {
        Exchange exchange = 1;                      // 交易所
        string code = 2;                            // 证券代码
        string name = 3;                            // 证券名称
        int64 balance = 4;                          // 剩余数量(今持仓量)
        int64 available_quantity = 5;               // 可用数量(可卖出数量)
        int32 freeze_quantity = 6;                  // 冻结数量(可能是真正的冻结数量，例如：司法冻结等)
        int64 buy_quantity = 7;                     // 当日买入数量
        int64 sell_quantity = 8;                    // 当日卖出数量
        string market_value = 9;                    // 最新市值
        string cost = 10;                           // 持仓均价
    }
}                                                   // 调用时payload = ResponseHeader + QueryPositionResponse

message QueryRationRequest                          /*查询客户配售权益*/
{                                                   // MUST: RequestHeader.api_id = 10005001
    string account_no = 1;
}

message QueryRationResponse
{                                                   // MUST: ResponseHeader.api_id = 11005001
    repeated Ration ration_list = 1;
    message Ration 
    {
        string account_no = 1;
        Exchange exchange = 2;
        uint32 quantity = 3;                        //权益数量
    }
}

message QueryPagination                             /* 分页游标 */
{
    uint32 offset = 1;                              // 起始位置
    uint32 size = 2;                                // 每页数据量
}